#ifndef SCENE_RENDERING_TOOLS_GLSLH
# define SCENE_RENDERING_TOOLS_GLSLH

/* ========================================================================== */
/*                                  INCLUDES                                  */
/* ========================================================================== */

# include "../../src/app/generation/chunk_macros.h"

/* ========================================================================== */
/*                                  FUNCTIONS                                 */
/* ========================================================================== */

bool	isOutsideTexture(ivec2 _pos) {
	return
		_pos.x < 0 ||
		_pos.y < 0 ||
		_pos.x >= CHUNK_SIZE ||
		_pos.y >= CHUNK_SIZE;
}

/* ========================================================================== */

// Returns height value at uv, on [index] layer.
float	getHeight(ivec2 _cube_pos, uint _index) {
	// TODO: select proper layer
	if (isOutsideTexture(_cube_pos))
		return 0.0;
	vec2	uv = vec2(_cube_pos) / vec2(textureSize(height_map, 0));
	return texture(height_map, vec3(uv, _index)).r;
}

/* ========================================================================== */

// The vertices of a cube.
const vec3 vertices[36] = {
	// Top
	vec3(0.0, 1.0, 0.0),
	vec3(1.0, 1.0, 1.0),
	vec3(1.0, 1.0, 0.0),

	vec3(0.0, 1.0, 0.0),
	vec3(0.0, 1.0, 1.0),
	vec3(1.0, 1.0, 1.0),

	// Bottom
	vec3(1.0, 0.0, 0.0),
	vec3(0.0, 0.0, 1.0),
	vec3(0.0, 0.0, 0.0),

	vec3(1.0, 0.0, 0.0),
	vec3(1.0, 0.0, 1.0),
	vec3(0.0, 0.0, 1.0),

	// Left
	vec3(0.0, 0.0, 1.0),
	vec3(0.0, 1.0, 0.0),
	vec3(0.0, 0.0, 0.0),

	vec3(0.0, 0.0, 1.0),
	vec3(0.0, 1.0, 1.0),
	vec3(0.0, 1.0, 0.0),

	// Right
	vec3(1.0, 0.0, 0.0),
	vec3(1.0, 1.0, 1.0),
	vec3(1.0, 0.0, 1.0),

	vec3(1.0, 0.0, 0.0),
	vec3(1.0, 1.0, 0.0),
	vec3(1.0, 1.0, 1.0),

	// Front
	vec3(0.0, 0.0, 0.0),
	vec3(1.0, 1.0, 0.0),
	vec3(1.0, 0.0, 0.0),

	vec3(0.0, 0.0, 0.0),
	vec3(0.0, 1.0, 0.0),
	vec3(1.0, 1.0, 0.0),

	// Back
	vec3(1.0, 0.0, 1.0),
	vec3(0.0, 1.0, 1.0),
	vec3(0.0, 0.0, 1.0),

	vec3(1.0, 0.0, 1.0),
	vec3(1.0, 1.0, 1.0),
	vec3(0.0, 1.0, 1.0)
};

// Determine position of the vertex in the world.
vec4	extractPos(ivec2 _cubePos, float _height, int _chunkId) {
	vec3 position = vertices[gl_VertexIndex];
	position.xz += _cubePos;
	position.y += _height;

	vec3 chunk = 16.0 * vec3(
		_chunkId % RENDER_DISTANCE,
		0.0,
		_chunkId / RENDER_DISTANCE);

	return vec4(chunk + position, 1.0);
}

#endif // SCENE_RENDERING_TOOLS_GLSLH