#ifndef SCENE_RENDERING_TOOLS_GLSLH
# define SCENE_RENDERING_TOOLS_GLSLH

/* ========================================================================== */
/*                                   OBJECTS                                  */
/* ========================================================================== */

// Data contained in VerticesData buffer.
struct VertexInput {
	uvec3	blockPos;
	uint	face;
	uint	layer;
	bool	isSideways;
};

// cf. block_properties.h
struct Block {
	vec3	worldPos;
	uint	type;
	uint	properties;
};

/* ========================================================================== */
/*                                  FUNCTIONS                                 */
/* ========================================================================== */

/* GENERAL ================================================================== */

// Sampler for chunks texture.
Block	getBlock(in uvec3 _blockPos, in uint _chunkId) {
	vec3 worldPos = vec3(_blockPos) + vec3(_chunkId * CHUNK_SIZE);

	float x_offsetted = float((_blockPos.x * 4) + (_blockPos.y % 4));
	float z_offsetted = float((_blockPos.z * 4) + (_blockPos.y / 4));
	vec3 uvw = vec3(
		vec2(x_offsetted, z_offsetted) / vec2(textureSize(chunks, 0)),
		_chunkId);
	uvec2 blockRawData = texture(chunks, uvw).rg;

	return Block(worldPos, blockRawData.r, blockRawData.g);
}

/* CS ======================================================================= */

#ifdef CS

uint	packBlockPos(in uvec3 _pos) {
	return (_pos.x << 8) | (_pos.y << 4) | _pos.z;
}

#endif // CS

/* RS ======================================================================= */

#ifdef RS

// Unpacks VertexInput from vertices data buffer.
VertexInput	unpackVertexInput(in uint _packedInput) {
	VertexInput vertexInput;

	uint packedBlockPos = _packedInput >> 20;
	vertexInput.blockPos = uvec3(packedBlockPos >> 8,
						   packedBlockPos >> 4 & 0xF,
						   packedBlockPos & 0xF);

	vertexInput.face = (_packedInput >> 17) & 0x7;
	vertexInput.layer = (_packedInput >> 5) & 0xFFF;
	vertexInput.isSideways = bool((_packedInput >> 4) & 0x1);

	return vertexInput;
}

#endif // RS

/* ========================================================================== */

#endif // SCENE_RENDERING_TOOLS_GLSLH