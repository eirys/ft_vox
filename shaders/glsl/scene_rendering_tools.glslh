#ifndef SCENE_RENDERING_TOOLS_GLSLH
# define SCENE_RENDERING_TOOLS_GLSLH

/* ========================================================================== */
/*                                  FUNCTIONS                                 */
/* ========================================================================== */

int	isOutsideTexture(ivec2 _pos) {
	if (_pos.x < 0 || _pos.y < 0)
		return -1;
	else if (_pos.x >= CHUNK_SIZE || _pos.y >= CHUNK_SIZE)
		return 1;
	return 0;
}

/* ========================================================================== */

float	getHeight(ivec2 _cubePos, uint _layer) {
	// TODO: select proper layer
	return 0.0;
	int isOutside = isOutsideTexture(_cubePos);
	if (isOutside != 0)
		return 0.0;
	vec2 cubeUV = vec2(_cubePos) / vec2(textureSize(height_map, 0));
	return texture(height_map, vec3(cubeUV, _layer)).r;
}

/* ========================================================================== */

// The vertices of a cube.
const vec3 vertices[36] = {
	// Top
	vec3(0.0, 1.0, 0.0),
	vec3(1.0, 1.0, 1.0),
	vec3(1.0, 1.0, 0.0),
	vec3(0.0, 1.0, 0.0),
	vec3(0.0, 1.0, 1.0),
	vec3(1.0, 1.0, 1.0),

	// Bottom
	vec3(1.0, 0.0, 0.0),
	vec3(0.0, 0.0, 1.0),
	vec3(0.0, 0.0, 0.0),
	vec3(1.0, 0.0, 0.0),
	vec3(1.0, 0.0, 1.0),
	vec3(0.0, 0.0, 1.0),

	// Left
	vec3(0.0, 0.0, 1.0),
	vec3(0.0, 1.0, 0.0),
	vec3(0.0, 0.0, 0.0),
	vec3(0.0, 0.0, 1.0),
	vec3(0.0, 1.0, 1.0),
	vec3(0.0, 1.0, 0.0),

	// Right
	vec3(1.0, 0.0, 0.0),
	vec3(1.0, 1.0, 1.0),
	vec3(1.0, 0.0, 1.0),
	vec3(1.0, 0.0, 0.0),
	vec3(1.0, 1.0, 0.0),
	vec3(1.0, 1.0, 1.0),

	// Front
	vec3(0.0, 0.0, 0.0),
	vec3(1.0, 1.0, 0.0),
	vec3(1.0, 0.0, 0.0),
	vec3(0.0, 0.0, 0.0),
	vec3(0.0, 1.0, 0.0),
	vec3(1.0, 1.0, 0.0),

	// Back
	vec3(1.0, 0.0, 1.0),
	vec3(0.0, 1.0, 1.0),
	vec3(0.0, 0.0, 1.0),
	vec3(1.0, 0.0, 1.0),
	vec3(1.0, 1.0, 1.0),
	vec3(0.0, 1.0, 1.0)
};

// Determine position of the vertex in the world.
vec4	extractPos(uint _vertexId, ivec2 _cubePos, float _height, ivec2 _chunkPos) {
	vec4 position = vec4(vertices[_vertexId], 1.0);

	position.xz += vec2((CHUNK_SIZE * _chunkPos) + _cubePos);
	position.y  += _height;

	return position;
}

/* ========================================================================== */

bool	cullUnseenFace(int _face, ivec2 _cubePos, int _chunkId, float _cubeHeight) {
	ivec2	adjacentCubePos = ivec2(-1);
	if (_face == 2) {
		adjacentCubePos = ivec2(_cubePos.x - 1, _cubePos.y);
	} else if (_face == 3) {
		adjacentCubePos = ivec2(_cubePos.x + 1, _cubePos.y);
	} else if (_face == 4) {
		adjacentCubePos = ivec2(_cubePos.x, _cubePos.y - 1);
	} else if (_face == 5) {
		adjacentCubePos = ivec2(_cubePos.x, _cubePos.y + 1);
	} else {
		return false;
	}
	return getHeight(adjacentCubePos, _chunkId) >= _cubeHeight;
}

#endif // SCENE_RENDERING_TOOLS_GLSLH