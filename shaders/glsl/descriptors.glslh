#ifndef DESCRIPTORS_GLSLH
# define DESCRIPTORS_GLSLH

/* ========================================================================== */
/*                                  INCLUDES                                  */
/* ========================================================================== */

#include "../../src/app/generation/chunk_macros.h"

/* ========================================================================== */
/*                                 DESCRIPTORS                                */
/* ========================================================================== */

#ifdef QUAD_COUNT
# define quadCount _quadCount.n
# define QUAD_COUNT_DESCRIPTOR	\
_QuadCount {					\
	uint n[TOTAL_CHUNKS];		\
}	_quadCount
#endif // QUAD_COUNT

#ifdef QUAD_DATA
// blockUv: 12 bit		-> to retrieve block type in `chunks` + block position
// face: 3 bits			-> to retrieve which face to sample
// layer: 12 bits		-> to retrieve which chunk to offset block position
// orientation: 1 bit	-> swap uv orientation for directed faces
// unused: 3 bits
# define quadData _quadData.data
# define QUAD_DATA_DESCRIPTOR					\
_QuadData {										\
	uint data[TOTAL_CHUNKS][MAX_FACE_COUNT];	\
}	_quadData
#endif // QUAD_DATA

#ifdef FRUSTUM
# define frustum _frustum.planes
# define FRUSTUM_DESCRIPTOR		\
_Frustum {						\
	vec4 planes[FACE_COUNT];	\
}	_frustum
#endif // FRUSTUM

#ifdef CHUNKS
# define chunks _chunks
// .r: unused (8 bits)
// .g: unused (2 bits)
//     visible faces (6 bits)
// .b: type (8 bits)
// .a: properties (8 bits)
# define CHUNKS_DESCRIPTOR	_chunks
#endif // CHUNKS

#ifdef CAMERA
# define camera _camera.vp
# define CAMERA_DESCRIPTOR		\
_Camera {						\
	mat4 vp;					\
}	_camera
#endif // CAMERA

#ifdef PROJECTOR
# define projector _projector.vp
# define PROJECTOR_DESCRIPTOR	\
_Projector {					\
	mat4 vp;					\
}	_projector
#endif // PROJECTOR

#endif // DESCRIPTORS_GLSLH